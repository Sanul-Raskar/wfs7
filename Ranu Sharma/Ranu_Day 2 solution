-------------------Author:Ranu Sharma----------------
-----------------------------------------------------

Solution 14:
/*Arithmetic operations by creating objects*/
package com.day.two;

public class Calculator {
	public void add(double a,double b){
		double c=a+b;
		System.out.println("Sum is : "+c);
	}
	public void diff(double a,double b){
		double c=a-b;
		System.out.println("Diff is : "+c);
	}
	public void mul(double a,double b){
		double c=a*b;
		System.out.println("Product is : "+c);
	}
	public void div(double a,double b){
		double c=a/b;
		System.out.println("Quotient is : "+c);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Calculator ob=new Calculator();//creating object
		double x=10,y=5;
		/*calling respective functions*/
		ob.add(x, y);
		ob.diff(x, y);
		ob.mul(x, y);
		ob.div(x, y);
		
	}

}

Solution 15:

/*Displaying the no of objects created for a class.*/
package com.day.two;

public class Sample {
	static int i=0;
	//instance block
	{
		i++;
	}	
	//various types of constructors that can create objects
	public Sample(){
		
	}
	public Sample(int n){
		
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		//creating objects
		Sample ob1=new Sample();
		Sample ob2=new Sample();
		Sample ob3=new Sample(5);
		System.out.println(i);
	}

}

Solution 17:

/*
		“The quick brown fox jumps over the lazy dog”.
1.Print the character at the 12th index.
2.Check whether the String contains the word “is”.
3.Add the string “and killed it” to the existing string.
4.Check whether the String ends with the word “dogs”.
5.Check whether the String is equal to “The quick brown Fox jumps over the lazy Dog”.
6.Check whether the String is equal to “THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG”.
7.Find the index position of the character “a”.
8.Find the last index position of the character “e”.
9.Find the length of the String.
10.Check whether the String matches to “The quick brown Fox jumps over the lazy Dog”.
11.Replace the word “The” with the word “A”.
12.Split the above string into two such that two animal names do not come together.
13.Print the animal names alone separately from the above string.
14.Print the above string in completely lower case.
15.Print the above string in completely upper case.
*/
package com.day.two;

public class StringOperations {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s="The quick brown fox jumps over the lazy dog";
		char c=s.charAt(11);
		System.out.println("Character at the 12th index is : "+c);
		System.out.println("the String contains the word “is” : " + s.contains("is"));
		String s2=" and killed it";
		String s3=s+s2;
		System.out.println("After Appending"+s3);
		boolean flag= s3.endsWith("dogs");
		System.out.println("String ends with dog:"+flag);
		// Checking whether the String is equal to “The quick brown Fox jumps over the lazy Dog”
		System.out.println(s);
		if(s.equals("The quick brown Fox jumps over the lazy Dog"))
			System.out.println("Equal");
		else
			System.out.println("Not Equal");
		
		//Checking whether the String is equal to “THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG”
		if(s.compareTo("THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG")==0)
			System.out.println("Equal");
		else
			System.out.println("Not Equal");
		//Finding the index position of the character a
		System.out.println(s.indexOf("a"));
				
		//Finding the last index position of the character “e”
		System.out.println(s.lastIndexOf("e"));
	
		//Finding the length of the String.
		System.out.println(s.length());
		
		//Checking whether the String matches to “The quick brown Fox jumps over the lazy Dog”
		if(s.compareTo("The quick brown Fox jumps over the lazy Dog")==0)
				System.out.println("Equal");
		else
				System.out.println("Not Equal");
		//Replacing the word “The” with the word “A”
		String s4=s.replace("The","A");
		System.out.println("After Replacing the word “The” with the word “A”:"+s4);
		
		//Splitting the above string into two such that two animal names do not come together
		String arr[]=s.split(" ",s.length());
		System.out.println("After splitting");
		for(int i=0;i<arr.length;i++)
		{
			System.out.println(arr[i]);
		}
		//Printing the animal names alone separately from the above string.
		String t="",z="";
		for (String val: s.split(" "))  {
			if(val.equals("fox")){
				t=val;
			}
			if(val.equals("dog")){
				 z=val;
			}
		}
			          
		 // printing the final value. 
		 System.out.println("Animal names are:"+t+" and "+z);
		
		
		//Printing the above string in completely lower case
		System.out.println("String in lowercase: "+s.toLowerCase());
			
		//Printing the above string in completely upper case
		System.out.println("String in uppercase: "+s.toUpperCase());
		
	}

}

Solution 18:

/*Demonstrating the difference between equals and == operator */
package com.day.two;

public class Solution18 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//String s1 = new String("Comparing == and equals function"); 
       // String s2 = new String("Comparing == and equals function"); 
        
        String s1 = new String("HELLO"); 
        String s2 = new String("HELLO");
       // Both s1 and s2 refers to different objects.
       
        System.out.println(s1 == s2); //When we use == operator for s1 and s2 comparison then the result is false as both have different addresses in memory.
        System.out.println(s1.equals(s2)); //Using equals, the result is true because its only comparing the values given in s1 and s2.
        
        String s3=s1;
        System.out.println(s1 == s3);//since both s1 and s3 reference variable are pointing to same object 
       
	}

}

Solution 19:

/* Copy the 8 elements into another array and display the same.*/
package com.day.two;

public class ArrayCopy {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		 int [] arr1 = new int [] {11, 12, 33, 44, 35, 66, 77, 88};     
         //Creating another array arr2   
        int arr2[] = new int[arr1.length];    
        //Copying all elements of one array into another    
        for (int i = 0; i < arr1.length; i++) {     
            arr2[i] = arr1[i];     
        }      
         //Displaying elements of array arr1     
        System.out.println("Elements of original array: ");    
        for (int i = 0; i < arr1.length; i++) {     
           System.out.print(arr1[i] + " ");    
        }     
            
        System.out.println();    
            
        //Displaying elements of array arr2     
        System.out.println("Elements of copy array: ");    
        for (int i = 0; i < arr2.length; i++) {     
           System.out.print(arr2[i] + " ");    
        }     

	}

}

Solution 20:
/* Displaying the sum and the average of elements in the array.*/
package com.day.two;

public class ArrayOperations {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] array = {30, 71, 66, 82, 97, 99};
        int total = 0;
        
        for(int i=0; i<array.length; i++){
        	total = total + array[i];//Calculating the sum
        }
        
        double average = total / array.length;//Calculating the average
        System.out.println("The sum is:"+ total);
        System.out.println("The average is:"+ average);
	
	}

}

Solution 21:

/*Displaying sum of matrices*/
package com.day.two;

import java.util.Scanner;

public class MatricesSum {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 int row, column, c, d;
		 Scanner sc = new Scanner(System.in);
		 System.out.println("Enter the number of rows and columns of matrix");
		 row = sc.nextInt();
		 column = sc.nextInt();
		 int first[][] = new int[row][column];       //creating matrix
		 int second[][] = new int[row][column];
		 int sum[][] = new int[row][column];
		 
		 //input of first matrix
		 System.out.println("Enter the elements of first matrix");    
		 for (c = 0; c < row; c++)
		    for (d = 0; d < column; d++)
		        first[c][d] = sc.nextInt();
		 
		//input of second matrix
		 System.out.println("Enter the elements of second matrix");
		 for (c = 0 ; c < row; c++)
		    for (d = 0 ; d < column; d++)
		        second[c][d] = sc.nextInt();
		 
		 //adding the elements
		 for (c = 0; c < row; c++)
		    for (d = 0; d < column; d++)
		        sum[c][d] = first[c][d] + second[c][d];
		 
		 //Displaying the added matrice
		 System.out.println("Sum of the matrices:");
		
		  for (c = 0; c < row; c++)
		    {
		      for (d = 0; d < column; d++)
		         System.out.print(sum[c][d] + "\t");

		      System.out.println();
		    }
	}

}

Solution 22:
/*Displaying the square of the elements of a two dimensional array*/
package com.day.two;

import java.util.Scanner;

public class MatricesSquare {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 int row, column, c, d;
		 Scanner sc = new Scanner(System.in);
	     System.out.println("Enter the number of rows and columns of matrix");
		 row = sc.nextInt();
		 column = sc.nextInt();
		 int first[][] = new int[row][column];       //creating matrix
		 int square[][] = new int[row][column];
		 System.out.println("Enter the elements of first matrix");     //input of first 2D array
		 for (c = 0; c < row; c++)
			 for (d = 0; d < column; d++)
				 	first[c][d] = sc.nextInt();

		 for (c = 0; c < row; c++)
			 for (d = 0; d < column; d++)
				 	square[c][d] = first[c][d] * first[c][d];   //squaring each element of the 2D array 
		 
		 System.out.println("Square of the matrices:");
		//Displaying the matrix
		  for (c = 0; c < row; c++)
			 {
			 for (d = 0; d < column; d++)
				 System.out.print(square[c][d] + "\t");
			     System.out.println();
			 }
		  
	}

}

Solution 23:
/* Find the number of occurrences of each element in the Array.*/
package com.day.two;

public class Occurance {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int [] arr = new int [] {1, 1, 18, 13, 12, 2, 2, 18, 1, 12, 18} ;   
        //Array for will store frequencies of element  
        int [] fr = new int [arr.length];  
        int visited = -1;  
        
        for(int i = 0; i < arr.length; i++){  
            int count = 1;  
            for(int j = i+1; j < arr.length; j++){  
                if(arr[i] == arr[j]){  
                    count++;  
                    //To avoid counting same element again  
                    fr[j] = visited;  
                }  
            }  
            if(fr[i] != visited)  
                fr[i] = count;  
        }  
        
        //Displays the frequency of each element present in array  
      
        System.out.println(" Element | Frequency");  
        System.out.println("---------------------");  
        for(int i = 0; i < fr.length; i++){  
            if(fr[i] != visited)  
                System.out.println("    " + arr[i] + "    |    " + fr[i]);  
        }  
	}

}


Solution 24:
/* Overloading the area and perimeter method to calculate for both square and rectangle. */
package com.day.two;

public class Shape {
		
		public void area(int side)
		{
			int area=side*side;
			System.out.println("Area of square is:"+area);
		}
		public void area(int length,int breadth)
		{
			int area=length*breadth;
			System.out.println("Area of rectangle is:"+area);
		}
		public void perimeter(int side)
		{
			int perimeter=4*side;
			System.out.println("Perimeter of sqaure is:"+perimeter);
		}
		public void perimeter(int length,int breadth)
		{
			int perimeter=2*(length+breadth);
			System.out.println("Prea of rectangle is:"+perimeter);
		}

		public static void main(String args[])
		{
			int a=20,b=30;
			Shape s=new Shape();
			s.area(a);
			s.area(a,b);
			s.perimeter(a);
			s.perimeter(a,b);
		}
	

}


Solution 25:
/* Constructor overloading and demonstrate by creating different employee objects 
 */
package com.day.two;

public class EmployeeOverload {

	private String empName;
	private int empId;
	private int empAge;
	private String empDesgn;
	private String empLocation;
	private int empExpInYrs;
	
	//Constructor overloading
	//Default Constructor
	public EmployeeOverload(String empName) {
		this.empName = empName;
	}
	
	//Parameterized Constructors
	public EmployeeOverload(String empName, int empId) {
		this.empName = empName;
		this.empId = empId;
	}
	
	public EmployeeOverload(String empName, int empId, int empAge) {
		this.empName = empName;
		this.empId = empId;
		this.empAge = empAge;
	}

	public EmployeeOverload(String empName, int empId, String empDesgn) {
		this.empName = empName;
		this.empId = empId;
		this.empDesgn = empDesgn;
	}

	public EmployeeOverload(String empName, int empId, int empAge, String empDesgn) {
		this.empName = empName;
		this.empId = empId;
		this.empAge = empAge;
		this.empDesgn = empDesgn;
	}

	public EmployeeOverload(String empName, int empId, int empAge, int empExpInYrs) {
		this.empName = empName;
		this.empId = empId;
		this.empAge = empAge;
		this.empExpInYrs = empExpInYrs;
	}
	
	public EmployeeOverload(String empName, int empId, String empDesgn, int empExpInYrs) {
		this.empName = empName;
		this.empId = empId;
		this.empDesgn = empDesgn;
		this.empExpInYrs = empExpInYrs;
	}

	public EmployeeOverload(String empName, int empId, String empDesgn, String empLocation, int empExpInYrs) {
		this.empName = empName;
		this.empId = empId;
		this.empDesgn = empDesgn;
		this.empLocation = empLocation;
		this.empExpInYrs = empExpInYrs;
	}

	public EmployeeOverload(String empName, int empId, int empAge, String empDesgn, String empLocation, int empExpInYrs) {
		this.empName = empName;
		this.empId = empId;
		this.empAge = empAge;
		this.empDesgn = empDesgn;
		this.empLocation = empLocation;
		this.empExpInYrs = empExpInYrs;
	}

	  void display(){
		  System.out.println("empName=" + empName + ", empId=" + empId + ", empAge=" + empAge + ", empDesgn=" + empDesgn
					+ ", empLocation=" + empLocation + ", ExpInYears=" + empExpInYrs );
		  }  
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		//Calling the constructors
		EmployeeOverload e1 = new EmployeeOverload("Ranu");
		EmployeeOverload e2 = new EmployeeOverload("Riya", 2);
		EmployeeOverload e3 = new EmployeeOverload("Anushka", 3, 22);
		EmployeeOverload e4 = new EmployeeOverload("Richa", 4, "DA");
		EmployeeOverload e5 = new EmployeeOverload("Ahmad", 5, 23, "TSE");
		EmployeeOverload e6 = new EmployeeOverload("Raj", 6, 24, 2);
		EmployeeOverload e7 = new EmployeeOverload("Sayan", 7, "SDE", 3);
		EmployeeOverload e8 = new EmployeeOverload("Ashis", 8, "SDE", "Pune", 5);
		EmployeeOverload e9 = new EmployeeOverload("Sahej", 9, 22, "TSE", "Banglore", 1);
		//Displaying values passed in constructor
		e1.display();
		e2.display();
		e3.display();
		e4.display();
		e5.display();
		e6.display();
		e7.display();
		e8.display();
		e9.display();
		
	}
}


Solution 26:

/*Overloading methods for Arithmetic operations*/
package com.day.two;

class Calculator {
		public void add(int a, int b) {
		   System.out.println("Sum of a and b is " + (a+b));
		}
		
		public void add(double a, double b) {
			   System.out.println("Sum of c and d is " + (a+b));
		}
		
		public void add(double a, int b) {
			   System.out.println("Sum of c and a is " + (a+(double)b));
		}
		
		public void add(int a, double b) {
			   System.out.println("Sum of b and d is " + (b+(double)a));
		}
		
	    public void diff(int a, int b) {
	    	System.out.println("Difference of a and b is " + (a-b));
		}
	    
	    public void diff(double a, double b) {
	    	System.out.println("Difference of c and d is " + (a-b));
		}
	    
	    public void diff(double a, int b) {
			   System.out.println("Difference of c and a is " + (a-(double)b));
		}
	    
	    public void diff(int a, double b) {
			   System.out.println("Difference of b and d is " + ((double)a-b));
		}
	    
	    public void mul(int a, int b) {
	    	System.out.println("Product of a and b is " + (a*b));
		}
	    
	    public void mul(double a, double b) {
	    	System.out.println("Product of c and d is " + (a*b));
		}
	    
	    public void mul(double a, int b) {
			   System.out.println("Product of c and a is " + (a*(double)b));
		}
	    
	    public void mul(int a, double b) {
			   System.out.println("Product of b and d is " + ((double)a*b));
		}
	    
	    public void div(int a, int b) {		   
		     double c = (double)a/b;
		     System.out.println("Division of a and b is " + c); 		   
		
	    }
	    
	    public void div(double a, double b) {			   
			     double c = a/b;
			     System.out.println("Division of c and d is " + c); 			 
		}
	    
	    public void div(int a, double b) {			  
			     double c = (double)a/b;
			     System.out.println("Division of b and d is " + c); 			  
		    }
	    
	    public void div(double a, int b) {			 
			     double c = a/(double)b;
			     System.out.println("Division of c and a is " + c); 			 
		    }
	
	public static void main(String[] args) {
		int a =10;
		int b =7;
		double c = 50;
		double d = 6;
		Calculator cal = new Calculator();//creating object
		/*calling functions with different primitive datatype*/
		cal.add(a, b);
		cal.add(c, d);
		cal.add(c, a);
		cal.add(b, d);
		cal.diff(a, b);
		cal.diff(c, d);
		cal.diff(c, a);
		cal.diff(b, d);
		cal.mul(a, b);
		cal.mul(c, d);
		cal.mul(c, a);
		cal.mul(b, d);
		cal.div(a, b);
		cal.div(c, d);
		cal.div(c, a);
		cal.div(b, d);
	}

}


Solution 28:

/*Program to perform add and difference method to accept var-args and demonstrate.*/
package com.day.two;

public class Solution28 {
	
		public static void main(String[] args) {
			
			System.out.println("Sum of 20 + 22 + 33 = " + add(20, 22, 33));//function call to add 3 elements
			System.out.println("Sum of 2 + 3 + 4 + 5 + 6 + 7 = " + add(2, 3, 4, 5, 6, 7));//function call to add 6 elements
			
			System.out.println("50 - 25 = " + diff(50,25));//function call to find difference
			System.out.println("60 - 2 - 4 - 6 - 13 = " + diff(60,2, 4, 6, 13));//function call to find difference

		}
		
		public static int add(int ...numbers) {
			//varargs to accept variable number of values
			int sum = 0;
			for(int number : numbers)
				sum += number;
			return sum;
		}
		
		public static int diff(int ...numbers) {
			//varargs to accept variable number of values and find difference
			int difference = numbers[0];
			if(numbers.length > 1) {
				for(int i = 1; i < numbers.length; i++)
					difference -= numbers[i];
			}
			return difference;
		}


}


