Day 3

Day 3


Exercise:Create a class called Vehicle. Create subclasses like Truck, Bus, Car etc. Add common methods 
in the base class and specific methods in the corresponding class. Create a class called Road 
and create objects for the Truck, Car, Bus etc and display the appropriate message. 

Solution 34:
package com.day.three;
//Applying multilevel inheritance
//Defining parent class
class Vehicle {
	public void names(){
		System.out.println("The brand of vechiles are: ");
	}
}
//Defining subclass Truck 
class Truck extends Vehicle{
	public void brand(){
		System.out.println("Tata");
	}
}
//Defining subclass Bus with method brand
class Bus extends Vehicle{
	public void brand(){
		System.out.println("Volvo");
	}
}
//Defining subclass Car with method brand
class Car extends Vehicle{	
	public void brand(){		
		System.out.println("Porsche");
	}
}

public class Road{
	
	public static void main(String[] args) {
		Car c=new Car();//Creating object of Car
		c.names();//Calling parent class
		c.brand();		//Calling subclass car as it extends Vehicle
		Bus b=new Bus();//Creating object of Bus
		b.brand();
		Truck t=new Truck();//Creating object of Truck
		t.brand();
	}
}










Exercise:In the Lab Exercise 34, in the Vehicle class constructor initialize few variables like color, no of 
wheels, model etc. Give appropriate values for these variables from the invoking subclass.  

Solution 35:


package com.day.three;
//Applying multilevel inheritance
//Defining parent class
class Vehicle {
	private String color;
	private int noOfWheels;
	private String model;
	public String getColor() {
		return color;
	}
	public void setColor(String color) {
		this.color = color;
	}
	public int getNoOfWheels() {
		return noOfWheels;
	}
	public void setNoOfWheels(int noOfWheels) {
		this.noOfWheels = noOfWheels;
	}	
	public String getModel() {
		return model;
	}
	public void setModel(String model) {
		this.model = model;
	}
	public Vehicle() {
		super();
	}
	//Parameterized constructor to store values from sub class
	public Vehicle(String color,int noOfWheels, String model){
		this.color = color;
		this.noOfWheels=noOfWheels;
		this.model=model;
	}
	public void names(){
		System.out.println("The detail of vechiles are: ");
	}
}
//Defining subclass Truck 
class Truck extends Vehicle{
	public Truck(){
		super("White",8,"TW");//calling super class constructor to assign in private members
	}
	public void brand(){
		System.out.println("Brand is Tata, "+"Colour: "+getColor()+" Wheels: "+getNoOfWheels()+" model is : "+getModel());
	}
}
//Defining subclass Bus with method brand
class Bus extends Vehicle{
	public Bus(){
		super("Blue",6,"ZX");//calling super class constructor to assign in private members
	}
	public void brand(){
		System.out.println("Brand is Volvo, "+"Colour: "+getColor()+" Wheels: "+getNoOfWheels()+" model is : "+getModel());
	}
}
//Defining subclass Car with method brand
class Car extends Vehicle{
	public Car(){
		super("Grey",4,"Porsche 911");//calling super class constructor to assign in private members
	}
	public void brand(){		
		System.out.println("Brand is Porsche, "+"Colour: "+getColor()+" Wheels: "+getNoOfWheels()+" model is : "+getModel());
	}
}

public class Road{
	
	public static void main(String[] args) {
		Car c=new Car();//Creating object of Car
		c.names();//Calling parent class		
		c.brand();		//Calling subclass car as it extends Vehicle
		Bus b=new Bus();//Creating object of Bus
		b.brand();
		Truck t=new Truck();//Creating object of Truck
		t.brand();
	}
}

Lab Exercise No:36

Exercise Objective(s):protected access specifier

Exercise:In the Lab Exercise 35, create another class called City which creates an object for the Car, 
Truck and Bus class and displays the details through a display () method in the Vehicle class. 
The other methods and data members should not be accessible by the City class.

Solution 26:
package com.day.two;

class Vehicle {
	protected String color;
	protected int noOfWheels;
	protected String model;
	
	public String getColor() {
		return color;
	}
	public void setColor(String color) {
		this.color = color;
	}
	public int getNoOfWheels() {
		return noOfWheels;
	}
	public void setNoOfWheels(int noOfWheels) {
		this.noOfWheels = noOfWheels;
	}
	public String getModel() {
		return model;
	}
	public void setModel(String model) {
		this.model = model;
	}
	public Vehicle() {
		super();
	}
	//Parameterized constructor to store values from sub class
	public Vehicle(String color,int noOfWheels, String model){
		this.color = color;
		this.noOfWheels=noOfWheels;
		this.model=model;
	}
	public void names(){
		System.out.println("The detail of vechiles are: ");
	}
	public void display(){
		System.out.println("Brand is Tata, "+"Colour: "+this.getColor()+" Wheels: "+this.getNoOfWheels()+" model is : "+this.getModel());
	}
	
}

class Truck extends Vehicle{
	public Truck(){
		super("White",8,"TW");//calling super class constructor to assign in protected members
	}
}

class Bus extends Vehicle{
	public Bus(){
		super("Blue",6,"ZX");//calling super class constructor to assign in protected members
	}
}

class Car extends Vehicle{
	public Car(){
		super("Grey",4,"Porsche 911");//calling super class constructor to assign in protected members
	}
}

public class City{
	
	public static void main(String[] args) {
		Car c=new Car();//Creating object of Car
		c.names();//Calling parent class
		c.display();		
		Bus b=new Bus();//Creating object of Bus
		b.display();
		Truck t=new Truck();//Creating object of Truck
		t.display();
	}
}











Lab Exercise No:39

Exercise Objective(s):Polymorphism

Exercise:Create a class called Worker. Write classes DailyWorker and SalariedWorker that inherit from
Worker.Every worker has a name and a salaryrate. Write method Pay (int hours) to compute 
the week pay of every worker.  A Daily worker is paid on the basis of the number of days 
she/he works.The salaried worker gets paid the wage for 40 hours a week no matter what the
actual hours are.  Test this program to calculate the pay of workers. 


Solution 39:

package com.day.three;

public class Worker {
	//Declaring variable private
	private String name;
	private int salaryRate;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getSalaryRate() {
		return salaryRate;
	}
	public void setSalaryRate(int salaryRate) {
		this.salaryRate = salaryRate;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		DailyWorker dw=new DailyWorker();
		dw.setName("Ram");
		dw.setSalaryRate(1000);
		dw.pay(45);
		SalariedWorker sw=new SalariedWorker("Shyam",1200);//Parameterized constructor
		sw.pay();
		
	}
	
}


class DailyWorker extends Worker{
	//calculating pay
	public void pay(int h){
		 int salary=h*this.getSalaryRate();
		 System.out.println("Name: "+this.getName()+"Pay: "+salary);
	}
}


class SalariedWorker extends Worker{
	public SalariedWorker(){
	
	}
	public SalariedWorker(String n,int r){
		this.setName(n);//setting name with set method
		this.setSalaryRate(r);
	}
	public void pay(){
		double salary=40*this.getSalaryRate();
		 System.out.println("Name: "+this.getName()+"Pay: "+salary);
	}
}





Lab Exercise No:41

Exercise Objective(s):abstract classes

Exercise:Create a class called Shape3D with the following method signatures alone, volume () and 
surfaceArea (). Then create subclasses like Cylinder, Sphere, and Cubeetc and implement 
these methods.

Solution 41:
package com.day.three;

abstract class Shape3D{
	//abstract method to define them later
	 abstract public void calculateArea();
	 abstract public void calculateVolume();
	 final float pi=3.14f;
	}

	class Sphere extends Shape3D{
	//Sphere extends abstract class Shape3D to calculate area and volume
	 double r=5;
	 private double area;
	 private double volume;
	 
	 //defining abstract method calculateArea for Sphere
	 public void calculateArea(){
		 area=4*pi*r*r;
		 System.out.println("The area of sphere is: "+area);
	 }
	//defining abstract method calculateVolume for Sphere
	 public void calculateVolume(){	  
		 volume=1.33333333334*pi*r*r*r;
		 System.out.println("The volume of sphere is: "+volume);
	 }
	}

	class Cylinder extends Shape3D{
	 double r=2,h=5,area,volume;
	
	 //Sphere extends abstract class Shape3D to calculate area and volume
	 //defining abstract method calculateArea for Cylinder
	 public void calculateArea(){     
		 area=(2*pi*r*h)+(2*pi*r*r);
		 System.out.println("The area of sphere is: "+area);
	 }
	//defining abstract method calculateVolume for Cylinder
	 public void calculateVolume(){
	  volume=pi*r*r*h;
	  System.out.println("The volume of sphere is: "+volume);
	 }
	
	}


public class Shape {

	public static void main(String[] args) {
		// Creating objects and calling the required functions
			Sphere s=new Sphere();
			s.calculateArea();
		    s.calculateVolume();
			Cylinder cy=new Cylinder();
			cy.calculateArea();
			cy.calculateVolume();
		 
	}
}

Solution 43:

Lab Exercise No:43

Exercise Objective(s):Implementation of an interface

Exercise:Implement Lab Exercise 41using Interfaces.

package com.day.three;

interface ShapeMensuration{
	//interface methods to define later
	 public void calculateArea();
	 public void calculateVolume();
	 final float pi=3.14f;
	}

	class SphereMensuration implements ShapeMensuration{
	//SphereMensuration implements class ShapeMensuration to calculate area and volume
	 double r=5;
	 private double area;
	 private double volume;
	 
	 //defining  method calculateArea for Sphere
	 public void calculateArea(){
		 area=4*pi*r*r;
		 System.out.println("The area of sphere is: "+area);
	 }
	//defining  method calculateVolume for Sphere
	 public void calculateVolume(){	  
		 volume=1.33333333334*pi*r*r*r;
		 System.out.println("The volume of sphere is: "+volume);
	 }
	}

	class CylinderMensuration implements ShapeMensuration{
	 double r=2,h=5,area,volume;
	
	 //Sphere implements class ShapeMensuration to calculate area and volume
	 //defining  method calculateArea for Cylinder
	 public void calculateArea(){     
		 area=(2*pi*r*h)+(2*pi*r*r);
		 System.out.println("The area of sphere is: "+area);
	 }
	//defining  method calculateVolume for Cylinder
	 public void calculateVolume(){
	  volume=pi*r*r*h;
	  System.out.println("The volume of sphere is: "+volume);
	 }
	
	}
public class ShapeInterface {

	public static void main(String[] args) {
		//Creating objects
		SphereMensuration s=new SphereMensuration();
		s.calculateArea();
	    s.calculateVolume();
	    CylinderMensuration cy=new CylinderMensuration();
		cy.calculateArea();
		cy.calculateVolume();
	}

}





Lab Exercise No:44

Exercise Objective(s):Implementingmore than one interface.

Exercise:Create two interfaces namely Drawable and Fillable. Create class called Line, Circle, Square and
implement following methods through interface.

<I>Drawable ------ drawingColor(), thickness()
<I>Fillable ---------- fillingColor(), size()


Solution 44:

package com.day.three;
	//interface Drawable which has undefined methods and is defined later in different class
	interface Drawable{
		public void drawingColor();
		public void thickness();
	}
	//interface Fillable which has undefined methods and is defined later in different class
	interface Fillable {
		public void fillingColor();
		public void size();
	}
	//defining both the interfaces for class Line
	class Line implements Drawable,Fillable{

		@Override
		public void fillingColor() {
			System.out.println("Filling Color of line is black");
			
		}

		@Override
		public void size() {
			System.out.println("Size of line is 2cm");
			
		}

		@Override
		public void drawingColor() {
			System.out.println("Color of line is Rouge pink");
			
		}

		@Override
		public void thickness() {
			System.out.println("Thickness of line is 1cm");
			
		}
		
	}
	//implementing both the interfaces
	class Circle implements Drawable,Fillable{

		@Override
		public void fillingColor() {
			System.out.println("Filling Color of Circle is Navy blue");
			
		}

		@Override
		public void size() {
			System.out.println("Area of Circle is 2cm sq");
			
		}

		@Override
		public void drawingColor() {
			System.out.println("Color of Circle is Magenta");
			
		}

		@Override
		public void thickness() {
			System.out.println("Thickness of Circle is 1cm");
			
		}
		
	}
	//defining both the interfaces for class Square
	class Square implements Drawable,Fillable{

		@Override
		public void fillingColor() {
			System.out.println("Filling Color of Square is Sea green");
			
		}

		@Override
		public void size() {
			System.out.println("Size of square is 2cm sq");
			
		}

		@Override
		public void drawingColor() {
			System.out.println("Color of square is Peach");
			
		}

		@Override
		public void thickness() {
			System.out.println("Thickness of square is 1cm");
			
		}
		
	}
	public class Draw {

	public static void main(String[] args) {
		
		//creating object for class Line
		Line line= new Line();
		//calling the functions of Line implemented through interface
		line.fillingColor();
		line.size();
		line.drawingColor();
		line.thickness();
		System.out.println();
		
		//creating object for class circle
		Circle circle = new Circle();
		//calling the functions of circle implemented through interface
		circle.fillingColor();
		circle.size();
		circle.drawingColor();
		circle.thickness();
		System.out.println();
		
		//creating object for class Square
		Square square= new Square();
		//calling the functions of Square implemented through interface
		square.fillingColor();
		square.size();
		square.drawingColor();
		square.thickness();
		System.out.println();

	}

}



Lab Exercise No:45

Exercise Objective(s):Implementation of an interface

Exercise:In Lab Exercise 39, create a package called finance and within it create an interface called 
Payable.It should define the getPayInfo() methodthat all the worker classeswillimplement.
                 Now display the details of the monthly pay of the workers.

Solution 45:

package com.day.three;

interface Payable{
	public void getPayInfo(int hr);
	
}
//calculating for DailyWorker  and implementing the interface
class DailyWorker extends POJO implements Payable {
	//calculating pay
	public DailyWorker(){
		//Default constructor
	}
	public void getPayInfo(int h){
		 int salary=h*this.getSalaryRate();
		 System.out.println("Name: "+this.getName()+"Pay: "+salary);
	}
}

//calculating for salaried worker and implementing the interface
class SalariedWorker extends POJO implements Payable{
	public SalariedWorker(){
	//Default constructor
		
	}
	public SalariedWorker(String n,int r){
		//Parameterized constructor
		this.setName(n);//setting name with set method
		this.setSalaryRate(r);
	}
	public void getPayInfo(int h){
		double salary=h*this.getSalaryRate();//calculating salary
		 System.out.println("Name: "+this.getName()+"Pay: "+salary);
	}
}
public class Worker2 extends POJO{
	//Declaring variable private
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		DailyWorker dw=new DailyWorker();
		dw.setName("Ram");
		dw.setSalaryRate(1000);
		dw.getPayInfo(45);
		SalariedWorker sw=new SalariedWorker("Shyam",1200);//Parameterized constructor
		sw.getPayInfo(40);
		
	}
	
}
class POJO{
	private String name;
	private int salaryRate;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getSalaryRate() {
		return salaryRate;
	}
	public void setSalaryRate(int salaryRate) {
		this.salaryRate = salaryRate;
	}
}


Lab Exercise No:46

Exercise Objective(s):Implementation of an interface

Exercise:Createa package called bank with the following Interfaces.

Create a package called BankImpl and create the following classes in it.

1.SavingsAcc which implements DepositAcc  and CreditInterest
2.FDAcc which implements DepositAcc  and CreditInterest
3.PersonalLoanAcc which implements LoanAcc and DebitInterest
4.HousingLoanAcc which implements LoanAcc and DebitInterest
Now create a class called MyAccount and create instances of all the accounts and generate appropriate output.

package com.bank;
public interface Account {
	String savings="Savings";
	String fixed="fixed";
	String personalLoan="personal Loan";
	String housingLoan="housing Loan";
	void createAcc();
}
package com.bank;

public interface CreditInterest extends Interest{
	double addMonthlyInt ();
	double addHalfYrlyInt();
	double addAnnualInt();
}
package com.bank;


 public interface DebitInterest extends Interest{
	 double deductMonthlyInt();
	 double deductHalfYrlyInt ();
	 double deductAnnualInt ();
}
package com.bank;


public interface DepositAcc extends Account{
	double  withdraw (double amt);
	double deposit(double da);
	double getBalance();
}
package com.bank;

public interface Interest {
	double savingsInterest=6;
	double fixedInterest=8.5;
	double personalLoanInterest=10;
	double housingLoanInterest=11;
	double calcInt();
}

package com.bank;

public interface LoanAcc extends Account{


	double repayPrincipal (double principal);
	double payInterest (double interest);
	double payPartialPrincipal (double partialPrincipal);

}
package com.bank;
import com.BankImpl.*;
		 
	 public class MyAccount{
		 	
			public static void main(String[] args) {
				
				SavingsAcc sc=new SavingsAcc();
				
				sc.createAcc();
				sc.setBalance(1000);
				sc.calcInt();
				sc.addAnnualInt();
				sc.addHalfYrlyInt();
				sc.addMonthlyInt();				
				sc.deposit(800);
				sc.withdraw(200);
				System.out.println("Balance is: "+sc.getBalance());
				System.out.println();
				
				FDAcc fd=new FDAcc();
				fd.createAcc();
				fd.setBalance(1000);
				fd.calcInt();
				fd.addAnnualInt();
				fd.addHalfYrlyInt();
				fd.addMonthlyInt();
				fd.deposit(800);
				fd.withdraw(200);
				System.out.println("Balance is: "+fd.getBalance());
				System.out.println();
				
				HousingLoanAcc hla=new HousingLoanAcc();
				hla.createAcc();
				hla.setBalance(5000);
				hla.calcInt();
				hla.deductMonthlyInt();
				hla.deductHalfYrlyInt();
				hla.deductAnnualInt();
				hla.repayPrincipal(400);
				hla.payInterest(200);
				hla.payPartialPrincipal(300);
				System.out.println("Balance is: "+hla.getBalance());
				
				PersonalLoanAcc pla=new PersonalLoanAcc();
				pla.createAcc();
				pla.setBalance(10000);
				pla.calcInt();
				pla.deductMonthlyInt();
				pla.deductHalfYrlyInt();
				pla.deductAnnualInt();
				pla.repayPrincipal(600);
				pla.payInterest(200);
				pla.payPartialPrincipal(300);
				System.out.println("Balance is: "+pla.getBalance());
			}

		}

	
	

















package com.BankImpl;

import com.bank.CreditInterest;
import com.bank.DepositAcc;

public class FDAcc implements DepositAcc, CreditInterest{
	private double balance;
	public void setBalance(double balance) {
		this.balance = balance;
	}
	
	@Override
	public void createAcc() {
		// TODO Auto-generated method stub
		System.out.println(fixed+"  account created");
	}

	@Override
	public double calcInt() {
		// TODO Auto-generated method stub
		System.out.println(savings+"  account  interest is:"+fixedInterest);
		double interest=(this.balance*fixedInterest)/100;
		this.balance=this.balance+interest;
		return interest;
	}

	@Override
	public double addMonthlyInt() {
		// TODO Auto-generated method stub
		System.out.println(fixed+"  account monthly interest is:"+fixedInterest/12);
		double interest=(this.balance*fixedInterest)/100;
		this.balance=this.balance+interest;
		return interest;
	}

	@Override
	public double addHalfYrlyInt() {
		// TODO Auto-generated method stub
		System.out.println(fixed+"  half yearly interest is :"+fixedInterest/2);
		this.balance=this.balance+(this.balance*fixedInterest)/100;
		return this.balance;
	}

	@Override
	public double addAnnualInt() {
		// TODO Auto-generated method stub
		System.out.println(fixed+"  addAnnualInt"+fixedInterest);
		this.balance=this.balance+(this.balance*fixedInterest)/100;
		return this.balance;
	}

	@Override
	public double withdraw(double w) {
		// TODO Auto-generated method stub
		this.balance= (this.balance-w);
		return (this.balance);
	}

	@Override
	public double deposit(double da) {
		// TODO Auto-generated method stub
		this.balance=(this.balance+da);
		return (this.balance);
	}

	@Override
	public double getBalance() {
			return this.balance;
		
	}

	
}
package com.BankImpl;

import com.bank.DebitInterest;
import com.bank.LoanAcc;

public class HousingLoanAcc implements LoanAcc , DebitInterest{

	private double balance;
	public void setBalance(double balance) {
		this.balance = balance;
	}
	@Override
	public void createAcc() {
		// TODO Auto-generated method stub
		System.out.println(housingLoan+"  account created");
	}

	@Override
	public double calcInt() {
		// TODO Auto-generated method stub
		System.out.println(housingLoan+"  account interest is:"+housingLoanInterest);
		double interest=(this.balance*housingLoanInterest)/100;
		this.balance=this.balance+interest;
		return interest;
		
	}

	@Override
	public double deductMonthlyInt() {
		// TODO Auto-generated method stub
		System.out.println(housingLoan+"  account monthly interest is:"+housingLoanInterest/12);
		double interest=(this.balance*housingLoanInterest)/100;
		this.balance=this.balance-interest;
		return interest;
	}

	@Override
	public double deductHalfYrlyInt() {
		// TODO Auto-generated method stub
		System.out.println(housingLoan+"  account deductHalfYrlyInt  is:"+housingLoanInterest/2);
		double interest=(this.balance*housingLoanInterest)/100;
		this.balance=this.balance-interest;
		return interest;
	}

	@Override
	public double deductAnnualInt() {
		// TODO Auto-generated method stub
		System.out.println(housingLoan+"  account deductAnnualInt  is:"+housingLoanInterest);
		double interest=(this.balance*housingLoanInterest)/100;
		this.balance=this.balance-interest;
		return interest;
	}

	@Override
	public double repayPrincipal(double p) {
		// TODO Auto-generated method stub
		this.balance-=p;
		return this.balance;
	}

	@Override
	public double payInterest(double p) {
		// TODO Auto-generated method stub
		this.balance-=p;
		return this.balance;
	}

	@Override
	public double payPartialPrincipal(double p) {
		// TODO Auto-generated method stub
		this.balance-=p;
		return this.balance;
	}
	public double getBalance() {
		return this.balance;
	
	}


}
package com.BankImpl;

import com.bank.DebitInterest;
import com.bank.LoanAcc;

public class PersonalLoanAcc implements LoanAcc, DebitInterest{
	private double balance;
	public void setBalance(double balance) {
		this.balance = balance;
	}
	@Override
	public void createAcc() {
		// TODO Auto-generated method stub
		System.out.println(personalLoan+"  account created");
	}

	@Override
	public double calcInt() {
		// TODO Auto-generated method stub
		System.out.println(personalLoan+"  account interest is:"+personalLoanInterest);
		double interest=(this.balance*personalLoanInterest)/100;
		this.balance=this.balance+interest;
		return interest;
		
	}

	@Override
	public double deductMonthlyInt() {
		// TODO Auto-generated method stub
		System.out.println(personalLoan+"  account monthly interest is:"+personalLoanInterest/12);
		double interest=(this.balance*personalLoanInterest)/100;
		this.balance=this.balance-interest;
		return interest;
	}

	@Override
	public double deductHalfYrlyInt() {
		// TODO Auto-generated method stub
		System.out.println(personalLoan+"  account deductHalfYrlyInt  is:"+personalLoanInterest/2);
		double interest=(this.balance*personalLoanInterest)/100;
		this.balance=this.balance-interest;
		return interest;
	}

	@Override
	public double deductAnnualInt() {
		// TODO Auto-generated method stub
		System.out.println(personalLoan+"  account deductAnnualInt  is:"+personalLoanInterest);
		double interest=(this.balance*personalLoanInterest)/100;
		this.balance=this.balance-interest;
		return interest;
	}

	@Override
	public double repayPrincipal(double p) {
		// TODO Auto-generated method stub
		this.balance-=p;
		return this.balance;
	}

	@Override
	public double payInterest(double p) {
		// TODO Auto-generated method stub
		this.balance-=p;
		return this.balance;
	}

	@Override
	public double payPartialPrincipal(double p) {
		// TODO Auto-generated method stub
		this.balance-=p;
		return this.balance;
	}
	public double getBalance() {
		return this.balance;
	}
	
}

package com.BankImpl;

import com.bank.Account;
import com.bank.CreditInterest;
import com.bank.DepositAcc;
import com.bank.MyAccount;
public class SavingsAcc implements DepositAcc,CreditInterest{
	private double balance;
	public void setBalance(double balance) {
		this.balance = balance;
	}
	
	@Override
	public void createAcc() {
		// TODO Auto-generated method stub
		System.out.println(savings+"  account created");
	}

	@Override
	public double calcInt() {
		// TODO Auto-generated method stub
		System.out.println(savings+"  account interest is:"+savingsInterest);
		double interest=(this.balance*savingsInterest)/100;
		this.balance=this.balance+interest;
		return interest;
	}

	@Override
	public double addMonthlyInt() {
		// TODO Auto-generated method stub
		System.out.println(savings+"  account monthly interest is:"+savingsInterest/12);
		double interest=(this.balance*savingsInterest)/100;
		this.balance=this.balance+interest;
		return interest;
	}

	@Override
	public double addHalfYrlyInt() {
		// TODO Auto-generated method stub
		System.out.println(savings+"  half yearly interest is :"+savingsInterest/2);
		this.balance=this.balance+(this.balance*savingsInterest)/100;
		return this.balance;
	}

	@Override
	public double addAnnualInt() {
		// TODO Auto-generated method stub
		System.out.println(savings+"  addAnnualInt "+savingsInterest);
		this.balance=this.balance+(this.balance*savingsInterest)/100;
		return this.balance;
	}

	@Override
	public double withdraw(double w) {
		// TODO Auto-generated method stub
		this.balance= (this.balance-w);
		return (this.balance);
	}

	@Override
	public double deposit(double da) {
		// TODO Auto-generated method stub
		this.balance=(this.balance+da);
		return (this.balance);
	}

	@Override
	public double getBalance() {
			return this.balance;
		
	}
}












Lab Exercise No:47

Exercise Objective(s):Inner classes

Exercise:Create a class called BankAccount with deposit (), withdraw () and getBalance () methods.
                  Create an inner class called InterestAdder and implement the interest calculations and add 
                  the interest to the current balance.
				  
Solution 47:
package com.day.four;
//outer class
public class BankAccount {
	private double bal;
	private double depositAmount;
	private double withdrawAmount;
	private double interest;
	public double getBal() {
		return bal;
	}
	public double getDepositAmount() {
		return depositAmount;
	}
	public void setDepositAmount(double depositAmount) {
		this.depositAmount = depositAmount;
	}
	public double getWithdrawAmount() {
		return withdrawAmount;
	}
	public void setWithdrawAmount(double withdrawAmount) {
		this.withdrawAmount = withdrawAmount;
	}
	public void setBal(double bal) {
		this.bal = bal;
	}
	//adding deposit amount
	void deposit (){
		this.bal=this.bal+this.depositAmount;
	}
	//Subtracting withdrawal amount
	void withdraw () {
		this.bal=this.bal-this.withdrawAmount;
	}
	//calculating balance
	void getBalance (){
		this.bal+=getInterest();
	}
	
	public double getInterest() {
			return interest;
		}
	public void setInterest(double interest) {
		this.interest = interest;
	}


	//Inner class and method to calculate interest	
	class InterestAdder{
		void interestAmount() {
				setInterest((bal*0.12));
		
			}
	}	

}

package com.day.four;

public class MyMainBankAccount {
	
	public static void main(String[] args) {

		BankAccount myOuter = new BankAccount();//Object of outer class
		BankAccount.InterestAdder myInner = myOuter.new InterestAdder(); //object of inner class
	    myOuter.setBal(100);
	    myOuter.setDepositAmount(25);
	    myOuter.deposit();
	    myOuter.setWithdrawAmount(10);
	    myOuter.withdraw();
	    myInner.interestAmount();
	    myOuter.getBalance();
	    System.out.println(myOuter.getBal());
	    
	}

}




Lab Exercise No:48

Exercise Objective(s):Local inner classes

Exercise:Create a class called BankAccount with deposit (), withdraw () and getBalance () methods.
                  Create a local inner class inside the getBalance() method called InterestAdder and implement 
                  the interest calculations and add the interest to the current balance.
				  
Solution 48:

package com.day.four;
//outer class
public class BankAccountLocalInner {

	double balance;

	public void setBalance(double balance){
		this.balance = balance;
	}
	public double getBalance(){
		//Local inner class
		class LocalInner{
			//calculate interest
			public double interestAdder()
			{	
				return (balance+(balance*12/100));
			}
		}
		//creating object of inner class
		LocalInner inner = new LocalInner();
		this.balance = inner.interestAdder();//calling the inner class function
		return balance;
}
	public void deposit(double amount){
		this.balance +=  amount;//updating balance amount
	}
	public void withdraw(double amount){
		this.balance -= amount;//updating balance amount after withdrawal
	}
	public static void main(String[] args) {
		
		BankAccountLocalInner outer = new BankAccountLocalInner();
		outer.deposit(1000);
		outer.withdraw(200);
		System.out.println(outer.getBalance());
	}
}



Lab Exercise No:49

Exercise Objective(s):Anonymous inner classes

Exercise:Create a class called BankAccount with deposit (), withdraw () and getBalance () methods.
                  Create an anonymous inner class in the getBalance() method to do the interest calculations 
and add the interest to the current balance.


Solution 49:

package com.day.three;


interface Calculate{
	  int interest();
	}

	 public class BankAccountAnonymous{
	   public int balance, interest;
	   void deposit(int x) {
	    	balance = balance+x;
	  	}
	   void withdraw(int x) {
	    	balance = balance-x;
	  	}
	   int getBalance() {
	    		//anonymous inner class. main method is hidden which is implementing interface	   
				Calculate p=new Calculate(){
						public int interest(){
							return (balance*12/100);
								
							}
	  };

	  balance=balance+p.interest();  
		return balance;

	  	}
	  public static void main(String[] args) 
	  {
		  //creating object of outer class
		  BankAccountAnonymous b=new BankAccountAnonymous();
		  b.deposit(1000);
		  b.withdraw(200);
		  System.out.println(b.getBalance());
		  
	    
	  }
	}
